-- httplib for gamesense LUA.
-- a very basic http library.
-- by Immune (fajer#6086)

local ffi = require("ffi")

--local variables for API. Automatically generated by https://github.com/simpleavaster/gslua/blob/master/authors/sapphyrus/generate_api.lua 
local materialsystem_find_materials, materialsystem_get_model_materials = materialsystem.find_materials, materialsystem.get_model_materials 
local renderer_load_svg, renderer_circle_outline, renderer_rectangle, renderer_gradient, renderer_circle, renderer_text, renderer_line, renderer_triangle = renderer.load_svg, renderer.circle_outline, renderer.rectangle, renderer.gradient, renderer.circle, renderer.text, renderer.line, renderer.triangle 
local renderer_measure_text, renderer_world_to_screen, renderer_indicator, renderer_texture = renderer.measure_text, renderer.world_to_screen, renderer.indicator, renderer.texture 
local cvar_sdr, cvar_mat_ambient_light_g, cvar_mat_ambient_light_b, cvar_mat_ambient_light_r, cvar_r_modelAmbientMin = cvar.sdr, cvar.mat_ambient_light_g, cvar.mat_ambient_light_b, cvar.mat_ambient_light_r, cvar.r_modelAmbientMin 
local client_world_to_screen, client_draw_rectangle, client_draw_circle_outline, client_userid_to_entindex, client_draw_gradient, client_set_event_callback, client_screen_size, client_trace_bullet, client_draw_indicator, client_draw_text = client.world_to_screen, client.draw_rectangle, client.draw_circle_outline, client.userid_to_entindex, client.draw_gradient, client.set_event_callback, client.screen_size, client.trace_bullet, client.draw_indicator, client.draw_text 
local client_scale_damage, client_get_cvar, client_random_int, client_latency, client_set_clan_tag, client_log, client_timestamp, client_trace_line = client.scale_damage, client.get_cvar, client.random_int, client.latency, client.set_clan_tag, client.log, client.timestamp, client.trace_line 
local client_random_float, client_draw_debug_text, client_delay_call, client_visible, client_exec, client_eye_position, client_set_cvar, client_error_log = client.random_float, client.draw_debug_text, client.delay_call, client.visible, client.exec, client.eye_position, client.set_cvar, client.error_log 
local client_draw_hitboxes, client_draw_circle, client_draw_line, client_camera_angles, client_system_time, client_color_log, client_reload_active_scripts = client.draw_hitboxes, client.draw_circle, client.draw_line, client.camera_angles, client.system_time, client.color_log, client.reload_active_scripts 
local entity_get_player_resource, entity_get_local_player, entity_is_enemy, entity_get_bounding_box, entity_is_dormant, entity_get_steam64, entity_get_player_name, entity_hitbox_position, entity_get_game_rules, entity_get_all = entity.get_player_resource, entity.get_local_player, entity.is_enemy, entity.get_bounding_box, entity.is_dormant, entity.get_steam64, entity.get_player_name, entity.hitbox_position, entity.get_game_rules, entity.get_all 
local entity_set_prop, entity_is_alive, entity_get_player_weapon, entity_get_prop, entity_get_players, entity_get_classname = entity.set_prop, entity.is_alive, entity.get_player_weapon, entity.get_prop, entity.get_players, entity.get_classname 
local globals_realtime, globals_absoluteframetime, globals_tickcount, globals_lastoutgoingcommand, globals_curtime, globals_mapname, globals_tickinterval, globals_framecount, globals_frametime, globals_maxplayers = globals.realtime, globals.absoluteframetime, globals.tickcount, globals.lastoutgoingcommand, globals.curtime, globals.mapname, globals.tickinterval, globals.framecount, globals.frametime, globals.maxplayers 
local ui_new_slider, ui_new_combobox, ui_reference, ui_set_visible, ui_new_textbox, ui_new_color_picker, ui_new_checkbox, ui_mouse_position, ui_new_listbox, ui_new_multiselect = ui.new_slider, ui.new_combobox, ui.reference, ui.set_visible, ui.new_textbox, ui.new_color_picker, ui.new_checkbox, ui.mouse_position, ui.new_listbox, ui.new_multiselect 
local ui_is_menu_open, ui_new_hotkey, ui_set, ui_new_button, ui_set_callback, ui_name, ui_get = ui.is_menu_open, ui.new_hotkey, ui.set, ui.new_button, ui.set_callback, ui.name, ui.get 
local math_ceil, math_tan, math_log10, math_randomseed, math_cos, math_sinh, math_random, math_huge, math_pi, math_max, math_atan2, math_ldexp, math_floor, math_sqrt, math_deg, math_atan, math_fmod = math.ceil, math.tan, math.log10, math.randomseed, math.cos, math.sinh, math.random, math.huge, math.pi, math.max, math.atan2, math.ldexp, math.floor, math.sqrt, math.deg, math.atan, math.fmod 
local math_acos, math_pow, math_abs, math_min, math_sin, math_frexp, math_log, math_tanh, math_exp, math_modf, math_cosh, math_asin, math_rad = math.acos, math.pow, math.abs, math.min, math.sin, math.frexp, math.log, math.tanh, math.exp, math.modf, math.cosh, math.asin, math.rad 
local table_maxn, table_move, table_pack, table_foreach, table_sort, table_remove, table_foreachi, table_unpack, table_getn, table_concat, table_insert = table.maxn, table.move, table.pack, table.foreach, table.sort, table.remove, table.foreachi, table.unpack, table.getn, table.concat, table.insert 
local string_find, string_format, string_rep, string_gsub, string_len, string_gmatch, string_dump, string_match, string_reverse, string_byte, string_char, string_upper, string_lower, string_sub = string.find, string.format, string.rep, string.gsub, string.len, string.gmatch, string.dump, string.match, string.reverse, string.byte, string.char, string.upper, string.lower, string.sub 
local client_find_signature = client.find_signature
--end of local variables 

ffi.cdef[[
    typedef uint32_t request_handle_t;
    typedef uint64_t steam_api_call_t;

    typedef struct {
        void* __pad[11];
        void* steam_http;
    }steam_ctx_t;

    typedef uint32_t(__thiscall* create_http_request_t)(void*, uint32_t, const char*);
    typedef bool(__thiscall* send_http_request_t)(void* _this, request_handle_t handle, steam_api_call_t call_handle);
    typedef bool(__thiscall* get_http_response_header_value_t)(void* _this, request_handle_t hRequest, const char *pchHeaderName, char *pHeaderValueBuffer, uint32_t unBufferSize);
    typedef bool(__thiscall* get_http_response_body_size_t)(void* _this, request_handle_t hRequest, uint32_t *unBodySize );
    typedef bool(__thiscall* get_http_response_body_data_t)(void* _this, request_handle_t hRequest, char *pBodyDataBuf, uint32_t unBufferSize );
    typedef bool(__thiscall* set_http_request_param_t)(void* _this, request_handle_t hRequest, const char* pchParamName, const char* pchParamValue);  
    typedef bool(__thiscall* release_http_request_t)(void* _this, request_handle_t hRequest);     
     
]]

local export = {}

local steam_ctx_match = client_find_signature("client_panorama.dll", "\xFF\x15\xCC\xCC\xCC\xCC\xB9\xCC\xCC\xCC\xCC\xE8\xCC\xCC\xCC\xCC\x6A") or error("steam_ctx")
local steam_ctx = ffi.cast("steam_ctx_t**", ffi.cast("char*", steam_ctx_match) + 7)[0] or error("steam_ctx not found")

local steam_http = ffi.cast("void*", steam_ctx.steam_http) or error("steam_http error")
local steam_http_ptr = ffi.cast("void***", steam_http) or error("steam_http_ptr error")
local steam_http_vtable = steam_http_ptr[0] or error("steam_http_ptr was null")

local create_http_request = ffi.cast("create_http_request_t", steam_http_vtable[0])
local send_http_request = ffi.cast("send_http_request_t", steam_http_vtable[5])
local get_http_response_header_value = ffi.cast('get_http_response_header_value_t', steam_http_vtable[10])
local get_http_response_body_size = ffi.cast('get_http_response_body_size_t', steam_http_vtable[11])
local get_http_response_body_data = ffi.cast('get_http_response_body_data_t', steam_http_vtable[12])
local set_http_request_param = ffi.cast('set_http_request_param_t', steam_http_vtable[4])
local release_http_request = ffi.cast('release_http_request_t', steam_http_vtable[14])

local task_interval = 0.5
local open_http_requests = {}
local debug_mode = false

local function debug_log(str)
    if debug_mode == true then
        client_log(str)
    end
end

local function http_get(url, callback)
    local handle = create_http_request(steam_http, 1, url)
    if send_http_request(steam_http, handle, 0) == false then
        debug_log("[HTTP] Failed to send HTTP request to: "..url)
        return
    end

    local obj = {
        ["handle"] = handle,
        ["callback"] = callback
    }

    debug_log("[HTTP] New GET request to: "..url)
    table_insert(open_http_requests, obj)
end

local function http_post(url, params, callback)
    local handle = create_http_request(steam_http, 3, url)

    for k, v in pairs(params) do
        set_http_request_param(steam_http, handle, k, v)
    end

    if send_http_request(steam_http, handle, 0) == false then
        debug_log("[HTTP] Failed to send HTTP request to: "..url)
        return
    end

    local obj = {
        ["handle"] = handle,
        ["callback"] = callback
    }

    debug_log("[HTTP] New POST request to: "..url)
    table_insert(open_http_requests, obj)
end

local function http_task()
    for k, v in ipairs(open_http_requests) do
        local handle = v["handle"]
        local callback = v["callback"]

        debug_log("[HTTP] Processing request #"..k)

        local body_size_ptr = ffi.new("uint32_t[1]")
        if get_http_response_body_size(steam_http, handle, body_size_ptr) == true then
            local body_size = body_size_ptr[0]
            debug_log("[HTTP]        body size: ", body_size)

            if body_size > 0 then
                local body = ffi.new("char[?]", body_size)
                
                if get_http_response_body_data(steam_http, handle, body, body_size) == true then
                    debug_log("[HTTP] ----------------------------------------------")
                    debug_log("[HTTP] Request #"..k.." finished. Invoking callback..")
                    table_remove(open_http_requests, k)
                    release_http_request(steam_http, handle)
                    callback(ffi.string(body, body_size))
                end
            end
        end
    end
    client_delay_call(task_interval, http_task)
end

client_delay_call(task_interval, http_task)

export.get = http_get
export.post = http_post

return export
